name: 'AWS Sandbox Provisioner'
# The run name will include the selected team, GitHub actor, purpose, and duration for the sandbox.
run-name: AWS Sandbox - ${{ inputs.TEAM }} by ${{ inputs.EMAIL }} for ${{ inputs.PURPOSE }} for ${{ inputs.DURATION }} Hours


# Teams are commonly employed to effectively organize sandbox accounts into distinct organizational units (OUs)
# within the AWS (Amazon Web Services) environment. This practice helps streamline resource management,
# enhances security measures, and facilitates efficient collaboration among various stakeholders.

on:
  workflow_dispatch:
    inputs:
      EMAIL:
        description: Input email id
        type: string
        required: true
      TEAM:
        description: "Select team"
        type: choice
        required: true
        options:
          REPLACE_WORKFLOW_TEAM_INPUT_OPTIONS

      DURATION:
        description: "Duration of access in Hours "
        type: choice
        required: true
        options:
          - 4
          - 8
          - 16
          - 24
          - 48
          - 96
          - 168
        default: 8
      PURPOSE:
        description: "Purpose of access e.g POC on IAM, RDS"
        type: string
        required: true
        default: "POC on "
      ADDITIONAL_USER_EMAILS:
        description: Enter additional user emails, e.g email1,email2,email3 (Optional)

env:
  REQUIRES_APPROVAL: "REPLACE_REQUIRES_APPROVAl_PLACEHOLDER"                                       # Create issue for approval in GitHub Actions
  APPROVAL_HOURS: REPLACE_APPROVAL_HOURS_PLACEHOLDER                                         # Approval required if the requested Hours is greater than APPROVAL_HOURS value
  SSO_ENABLED: "REPLACE_SSO_ENABLED_FLAG_HERE"
  SSO_INSTANCE_ARN: "INSTANCE_ARN_PLACEHOLDER"                 #"arn:aws:sso:::instance/ssoins-72230e0790e87c67"
  ADMINISTRATOR_ARN: "REPLACE_SANDBOX_USER_PERMISSION_SET_ARN_HERE"
  IDENTITY_STORE_ID: "IDENTITY_STORE_ID_PLACEHOLDER"           #"d-90676437e3"
  ADMIN_EMAIL: "REPLACE_AWS_ADMIN_EMAIL"                       # generic aws admins email id, will be used while creating accounts in case of account creation
  MANAGEMENT_ACCOUNT_ID: "REPLACE_AWS_MANAGEMENT_ACCOUNT"
  MANAGEMENT_ROLE_NAME: "REPLACE_MANAGEMENT_ROLE_HERE"
  AWS_REGION: "REPLACE_AWS_DEFAULT_REGION"
  HELPDESK_URL: 'https://cloudcover-helpdesk.freshdesk.com'
  SANDBOX_SLACK_WEBHOOK: ${{ secrets.webhook }}

defaults:
  run:
    shell: bash

jobs:
  setup-job:
    name: "setup-job"
    runs-on: "cldcvr-pvt-runner-aws"
    permissions:
      id-token: write
      contents: read
    outputs:
      SKIP: ${{ steps.create_flag.outputs.SKIP }}
      SANDBOX_OU_ID: ${{ steps.ou_select.outputs.SANDBOX_OU_ID }}
      POOL_OU_ID: ${{ steps.ou_select.outputs.POOL_OU_ID }}
      ACTOR_EMAIL: ${{ steps.actor.outputs.ACTOR_EMAIL }}
    steps:
      - name: "Clone Git Repository"
        uses: actions/checkout@v3

      - name: "Create SKIP flag and install aws cli"
        if: ${{ env.REQUIRES_APPROVAL }}
        id: "create_flag"
        run: |
          if [ $(echo ${{ inputs.DURATION }} | awk -F' ' '{ print $1 }') -le 8 ]; then
              echo "SKIP=true" >> $GITHUB_OUTPUT
          else
              echo "SKIP=false" >> $GITHUB_OUTPUT
          fi

      - name: "Select Pool OU and Sandbox OU according to team"
        working-directory: aws/provision
        id: "ou_select"
        env:
           INPUT_TEAM: ${{ inputs.TEAM }}
        run: |
          bash team_ou_select.sh

      - name: "Workflow Status Slack Notification"
        if: failure()
        uses: cldcvr/slack-notify-action@main
        with:
          message: "AWS Sandbox provisioning - Init job has failed"
          status: ${{ job.status }}
          SLACK_WEBHOOK_URL: ${{ env.SANDBOX_SLACK_WEBHOOK }}

  ticket-creation-and-approval:
    needs: setup-job
    name: "ticket-creation-and-approval"
    runs-on: "cldcvr-pvt-runner-aws"
    outputs:
      TICKET: ${{ steps.ticket.outputs.ticket }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Load secrets from 1Password"
        if: ${{ needs.setup-job.outputs.SKIP == 'false' }}
        uses: 1password/load-secrets-action@v1.3.1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          GIT_TOKEN: op://cldcvr-admins-common-vault/GIT_NUKE_CLOUD_TASK/credential
          FRESHDESK_API: op://cldcvr-admins-common-vault/FRESHDESK_TOKEN_AUDIT_CLDCVR/credential
          SANDBOX_SLACK_WEBHOOK: op://cldcvr-sandbox-provisioner-vault/SANDBOX_SLACK_WEBHOOK/password

      - name: "Create helpdesk ticket"
        if: ${{ needs.setup-job.outputs.SKIP == 'false' }}
        env:
          EMAIL: ${{ needs.setup-job.outputs.ACTOR_EMAIL }}
          DURATION: ${{ inputs.DURATION }}
          CLOUD: "AWS"
          REASON: ${{ inputs.PURPOSE }}
        run: |
          TICKET_ID=$(curl -s -u ${{ env.FRESHDESK_API }}:X -H "Content-Type: application/json" -d '{ "description": "<h3><br>Support ticket created on behalf of '"$EMAIL"' for temporary '"$CLOUD"' sandbox account access</h3><br><b>Details:</b><br>Email address: '"$EMAIL"' <br>Duration of access required: '"$DURATION"'<br>Purpose of access: '"$REASON"' <br> Github workflow url: '"$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"' <br> <br><em>Note: This needs no manual intervention. Ticket will be updated once access is provisioned. </em><br><br><h4>Thank you</h4>", "subject": "[CC-SANDBOX] ${{ inputs.TEAM }} - Temporary '"$CLOUD"' sandbox account request - '$EMAIL'", "email": "'$EMAIL'", "priority": 2, "status": 2, "type": "Service Request", "custom_fields" : { "cf_sub_type" : "Normal" } }' -X POST '${{ env.HELPDESK_URL }}/api/v2/tickets' | jq -r '.id')
          echo "Ticket url : ${{ env.HELPDESK_URL }}/a/tickets/$TICKET_ID"
           if [[ -z "$TICKET_ID" || "$TICKET_ID" == "null" ]]; then
             echo "Error: Ticket was not created properly"
             exit 1
           fi
          echo "ticket=$TICKET_ID" >> $GITHUB_OUTPUT
        id: ticket

      - name: "Manual approval from leads on GitHub issue"
        if: ${{ needs.setup-job.outputs.SKIP == 'false' }}
        uses: trstringer/manual-approval@v1.7.0
        timeout-minutes: 60
        id: approval
        with:
          secret: ${{ env.GIT_TOKEN }}
          approvers: sandbox-approvers
          minimum-approvals: 1
          issue-title: "${{ needs.setup-job.outputs.ACTOR_EMAIL }} want to have access to a AWS Sandbox account for ${{ inputs.DURATION }} for ${{ inputs.PURPOSE }}"

      - name: "Notify about decline of request"
        if: failure() && steps.approval.outcome == 'failure'
        run: |
          curl -v -u ${{ env.FRESHDESK_API }}:X -H "Content-Type: application/json" -X POST -d '{"body" : "Looks like, your request was not approved. <br> We could not proceed. Sorry for the inconvinence caused. <br><br> Closing the ticket."}' '${{ env.HELPDESK_URL }}/api/v2/tickets/${{ steps.ticket.outputs.ticket }}/reply' | jq '.'
          curl -v -u ${{ env.FRESHDESK_API }}:X -H "Content-Type: application/json" -X PUT -d '{"priority":1,"status":5,"custom_fields":{"cf_status_reason":"Completed"}}' '${{ env.HELPDESK_URL }}/api/v2/tickets/${{ steps.ticket.outputs.ticket }}'
      - name: "Get the approver"
        if: ${{ needs.setup-job.outputs.SKIP == 'false' }}
        id: approver
        env:
          BOT: "cldcvr-audit"
        run: |
          ISSUE_URL=$(curl -s \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GIT_TOKEN}" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/issues/comments?direction=desc | jq -r '.[0].issue_url')

          APPROVER=$(curl -s -L\
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${GIT_TOKEN}" \
              https://api.github.com/repos/$GITHUB_REPOSITORY/issues/comments?direction=desc | jq -r '.[] | select(.issue_url=="'$ISSUE_URL'" and .user.login!="'${BOT}'").user.login')

          APPROVER=$(echo "$APPROVER" | awk '{print $1; exit}')

          echo "approver=$APPROVER" >> $GITHUB_OUTPUT
      - name: "Add reply on ticket about approval and progress"
        if: ${{ needs.setup-job.outputs.SKIP == 'false' }}
        run: |

          APPROVER=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ env.GIT_TOKEN }}" \
            https://api.github.com/users/${{ steps.approver.outputs.approver }} | jq -r '.name')
          echo "Request approved by: $APPROVER"

          json_data=$(
             jq \
             --null-input \
             --compact-output \
             --arg message "<b>Good News!!</b> <br><br>Temporary sandbox request is approved by $APPROVER. <br><br> Account provisioning is in process. <br> <br> You will be notified once the account is provisioned. <br><br> Stay tuned.." \
             '{"body" : $message}'
             )
          curl -s -u ${{ env.FRESHDESK_API }}:X -H "Content-Type: application/json" -X POST -d "$json_data" '${{ env.HELPDESK_URL }}/api/v2/tickets/${{ steps.ticket.outputs.ticket }}/reply' | jq '.'
      - name: "Workflow Status Slack Notification"
        if: ${{ failure() || cancelled() }}
        uses: cldcvr/slack-notify-action@main
        with:
          message: "AWS sandbox provisioning - Ticket creation and approval job has failed"
          status: ${{ job.status }}
          SLACK_WEBHOOK_URL: ${{ env.SANDBOX_SLACK_WEBHOOK }}

  provision-account:
    needs: [setup-job, ticket-creation-and-approval]
    name: "provision-account"
    runs-on: "cldcvr-pvt-runner-aws"
    permissions:
      id-token: write
      contents: read
    steps:
      - name: "Cleanup workspace and configure aws cli"
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o /tmp/awscliv2.zip
          unzip -q /tmp/awscliv2.zip -d /tmp
          rm /tmp/awscliv2.zip
          sudo /tmp/aws/install --update
          rm -rf /tmp/aws/

      - name: "Clone Git Repo"
        uses: actions/checkout@v2.3.5

      - name: "Load secrets from 1Password"
        uses: 1password/load-secrets-action@v1.3.1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          FRESHDESK_API: op://cldcvr-admins-common-vault/FRESHDESK_TOKEN_AUDIT_CLDCVR/credential
          SANDBOX_SLACK_WEBHOOK: op://cldcvr-sandbox-provisioner-vault/SANDBOX_SLACK_WEBHOOK/password

      - name: "Configure AWS credentials for ${{ env.MANAGEMENT_ACCOUNT_ID }} account"
        run: |
          unset AWS_ACCESS_KEY_ID
          unset AWS_SECRET_ACCESS_KEY
          unset AWS_SESSION_TOKEN
          CREDS=( $(aws sts assume-role --role-arn "arn:aws:iam::${{env.MANAGEMENT_ACCOUNT_ID}}:role/${{env.MANAGEMENT_ROLE_NAME}}" --role-session-name "${{env.MANAGEMENT_ROLE_NAME}}" --duration-seconds 1000 --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text) )
          AWS_ACCESS_KEY_ID=${CREDS[0]}
          echo "::add-mask::$AWS_ACCESS_KEY_ID"
          echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID >> $GITHUB_ENV
          AWS_SECRET_ACCESS_KEY=${CREDS[1]}
          echo "::add-mask::$AWS_SECRET_ACCESS_KEY"
          echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> $GITHUB_ENV
          AWS_SESSION_TOKEN=${CREDS[2]}
          echo "::add-mask::$AWS_SESSION_TOKEN"
          echo AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN >> $GITHUB_ENV

      - name: "Provision AWS Sandbox account"
        working-directory: aws/provision/
        env:
          USER_EMAIL: ${{ needs.setup-job.outputs.ACTOR_EMAIL }}
          ADDITIONAL_USER_EMAILS: ${{ inputs.ADDITIONAL_USER_EMAILS }}
          ACCOUNT_POOL_OU: ${{ needs.setup-job.outputs.POOL_OU_ID }}
          SANDBOX_OU_ID: ${{ needs.setup-job.outputs.SANDBOX_OU_ID }}
          DURATION: ${{ inputs.DURATION }}
          TICKET_ID: ${{ needs.ticket-creation-and-approval.outputs.TICKET }}
          TEAM: ${{ inputs.TEAM }}
        run: |
          bash aws_provision_script.sh

      - name: "Add account provisioned comment"
        if: ${{ needs.setup-job.outputs.SKIP == 'false' }}
        run: |
          curl -s -u ${{ env.FRESHDESK_API }}:X -H "Content-Type: application/json" -X POST -d '{"body" : "Hi, <br> <br> Account provisioned, head over to https://cldcvr-sso.awsapps.com/start#/ to access the sandbox. <br><br> <em>Note: Access to the temporary account will be revoked automatically after the time has elapsed. <h4><br><br> USE THE SANDBOX RESPONSIBLY<h4> <br></em>"}' '${{ env.HELPDESK_URL }}/api/v2/tickets/${{ needs.ticket-creation-and-approval.outputs.TICKET }}/reply' | jq '.'
          curl -s -u ${{ env.FRESHDESK_API }}:X -H "Content-Type: application/json" -X PUT -d '{ "priority":1, "status":5, "custom_fields": {"cf_sub_type": "Access","cf_status_reason": "Completed"}}' '${{ env.HELPDESK_URL }}/api/v2/tickets/${{ needs.ticket-creation-and-approval.outputs.TICKET }}' | jq '.'

      - name: "Workflow Status Slack Notification"
        if: ${{ failure() || cancelled() }}
        uses: cldcvr/slack-notify-action@main
        with:
          message: "AWS sandbox provisioning - account provisioning job has failed"
          status: ${{ job.status }}
          SLACK_WEBHOOK_URL: ${{ env.SANDBOX_SLACK_WEBHOOK }}

